
STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004dc  080004dc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004dc  080004dc  000014dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e0  080004e0  000014e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004e4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004e8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004e8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000140c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000528  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000156  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b2c  00000000  00000000  00003ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000217c  00000000  00000000  000177d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dfd8  00000000  00000000  0001994e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e0  00000000  00000000  0009796c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00097f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004c4 	.word	0x080004c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004c4 	.word	0x080004c4

080001d4 <TIM2_PWM_Init>:
#include "stm32f4xx.h"

#define PWM_MAX 1000

void TIM2_PWM_Init(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Bật clock cho TIM2
 80001d8:	4b19      	ldr	r3, [pc, #100]	@ (8000240 <TIM2_PWM_Init+0x6c>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80001dc:	4a18      	ldr	r2, [pc, #96]	@ (8000240 <TIM2_PWM_Init+0x6c>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM2->PSC = 84 - 1;                  // Chia tần số 84MHz xuống 1MHz
 80001e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001e8:	2253      	movs	r2, #83	@ 0x53
 80001ea:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = PWM_MAX - 1;             // Định chu kỳ PWM
 80001ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80001f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2; // PWM mode 1
 80001f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001fa:	699b      	ldr	r3, [r3, #24]
 80001fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000200:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000204:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;      // Cho phép preload
 8000206:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000210:	f043 0308 	orr.w	r3, r3, #8
 8000214:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC1E;         // Kích hoạt đầu ra PWM
 8000216:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_CEN;            // Bắt đầu timer
 8000226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6013      	str	r3, [r2, #0]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023e:	4770      	bx	lr
 8000240:	40023800 	.word	0x40023800

08000244 <GPIO_Init>:

void GPIO_Init(void) {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Bật clock GPIOA
 8000248:	4b14      	ldr	r3, [pc, #80]	@ (800029c <GPIO_Init+0x58>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024c:	4a13      	ldr	r2, [pc, #76]	@ (800029c <GPIO_Init+0x58>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình PA0 (PWM - TIM2_CH1) chế độ AF1
    GPIOA->MODER |= GPIO_MODER_MODER0_1;
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <GPIO_Init+0x5c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a11      	ldr	r2, [pc, #68]	@ (80002a0 <GPIO_Init+0x5c>)
 800025a:	f043 0302 	orr.w	r3, r3, #2
 800025e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << (4 * 0));     // AF1 cho PA0
 8000260:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <GPIO_Init+0x5c>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a0e      	ldr	r2, [pc, #56]	@ (80002a0 <GPIO_Init+0x5c>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6213      	str	r3, [r2, #32]

    // Cấu hình PA1 (IN2 - Điều khiển chiều quay) là Output
    GPIOA->MODER |= GPIO_MODER_MODER1_0;
 800026c:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <GPIO_Init+0x5c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0b      	ldr	r2, [pc, #44]	@ (80002a0 <GPIO_Init+0x5c>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~GPIO_OTYPER_OT1;
 8000278:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <GPIO_Init+0x5c>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a08      	ldr	r2, [pc, #32]	@ (80002a0 <GPIO_Init+0x5c>)
 800027e:	f023 0302 	bic.w	r3, r3, #2
 8000282:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <GPIO_Init+0x5c>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <GPIO_Init+0x5c>)
 800028a:	f043 030c 	orr.w	r3, r3, #12
 800028e:	6093      	str	r3, [r2, #8]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40023800 	.word	0x40023800
 80002a0:	40020000 	.word	0x40020000

080002a4 <Motor_SetSpeed>:

void Motor_SetSpeed(uint16_t speed) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	80fb      	strh	r3, [r7, #6]
    if (speed > PWM_MAX) speed = PWM_MAX;
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002b4:	d902      	bls.n	80002bc <Motor_SetSpeed+0x18>
 80002b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002ba:	80fb      	strh	r3, [r7, #6]
    TIM2->CCR1 = speed;
 80002bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002c0:	88fb      	ldrh	r3, [r7, #6]
 80002c2:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <Motor_SetDirection>:

void Motor_SetDirection(uint8_t dir) {
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
    if (dir == 1) {
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d103      	bne.n	80002e8 <Motor_SetDirection+0x18>
        GPIOA->BSRR = GPIO_BSRR_BS1; // PA1 = 1 (Quay thuận)
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <Motor_SetDirection+0x2c>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	619a      	str	r2, [r3, #24]
    } else {
        GPIOA->BSRR = GPIO_BSRR_BR1; // PA1 = 0 (Quay ngược)
    }
}
 80002e6:	e003      	b.n	80002f0 <Motor_SetDirection+0x20>
        GPIOA->BSRR = GPIO_BSRR_BR1; // PA1 = 0 (Quay ngược)
 80002e8:	4b04      	ldr	r3, [pc, #16]	@ (80002fc <Motor_SetDirection+0x2c>)
 80002ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80002ee:	619a      	str	r2, [r3, #24]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40020000 	.word	0x40020000

08000300 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < ms * 4000; i++);
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	e002      	b.n	8000314 <delay_ms+0x14>
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3301      	adds	r3, #1
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800031a:	fb03 f202 	mul.w	r2, r3, r2
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	429a      	cmp	r2, r3
 8000322:	d8f4      	bhi.n	800030e <delay_ms+0xe>
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <main>:

int main(void) {
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
    GPIO_Init();
 8000336:	f7ff ff85 	bl	8000244 <GPIO_Init>
    TIM2_PWM_Init();
 800033a:	f7ff ff4b 	bl	80001d4 <TIM2_PWM_Init>

    while (1) {
        Motor_SetDirection(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f7ff ffc6 	bl	80002d0 <Motor_SetDirection>
        Motor_SetSpeed(500);
 8000344:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000348:	f7ff ffac 	bl	80002a4 <Motor_SetSpeed>
        delay_ms(2000);
 800034c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000350:	f7ff ffd6 	bl	8000300 <delay_ms>

        Motor_SetDirection(0);
 8000354:	2000      	movs	r0, #0
 8000356:	f7ff ffbb 	bl	80002d0 <Motor_SetDirection>
        Motor_SetSpeed(800);
 800035a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800035e:	f7ff ffa1 	bl	80002a4 <Motor_SetSpeed>
        delay_ms(2000);
 8000362:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000366:	f7ff ffcb 	bl	8000300 <delay_ms>

        Motor_SetSpeed(0);
 800036a:	2000      	movs	r0, #0
 800036c:	f7ff ff9a 	bl	80002a4 <Motor_SetSpeed>
        delay_ms(2000);
 8000370:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000374:	f7ff ffc4 	bl	8000300 <delay_ms>
        Motor_SetDirection(1);
 8000378:	bf00      	nop
 800037a:	e7e0      	b.n	800033e <main+0xc>

0800037c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <NMI_Handler+0x4>

08000384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <HardFault_Handler+0x4>

0800038c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <MemManage_Handler+0x4>

08000394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <BusFault_Handler+0x4>

0800039c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <UsageFault_Handler+0x4>

080003a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d2:	f000 f83f 	bl	8000454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <SystemInit+0x20>)
 80003e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003e6:	4a05      	ldr	r2, [pc, #20]	@ (80003fc <SystemInit+0x20>)
 80003e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000438 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000404:	f7ff ffea 	bl	80003dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000408:	480c      	ldr	r0, [pc, #48]	@ (800043c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800040a:	490d      	ldr	r1, [pc, #52]	@ (8000440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800040c:	4a0d      	ldr	r2, [pc, #52]	@ (8000444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a0a      	ldr	r2, [pc, #40]	@ (8000448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000420:	4c0a      	ldr	r4, [pc, #40]	@ (800044c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800042e:	f000 f825 	bl	800047c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000432:	f7ff ff7e 	bl	8000332 <main>
  bx  lr    
 8000436:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800043c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000440:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000444:	080004e4 	.word	0x080004e4
  ldr r2, =_sbss
 8000448:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800044c:	20000024 	.word	0x20000024

08000450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000450:	e7fe      	b.n	8000450 <ADC_IRQHandler>
	...

08000454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <HAL_IncTick+0x20>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	461a      	mov	r2, r3
 800045e:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <HAL_IncTick+0x24>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4413      	add	r3, r2
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <HAL_IncTick+0x24>)
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000000 	.word	0x20000000
 8000478:	20000020 	.word	0x20000020

0800047c <__libc_init_array>:
 800047c:	b570      	push	{r4, r5, r6, lr}
 800047e:	4d0d      	ldr	r5, [pc, #52]	@ (80004b4 <__libc_init_array+0x38>)
 8000480:	4c0d      	ldr	r4, [pc, #52]	@ (80004b8 <__libc_init_array+0x3c>)
 8000482:	1b64      	subs	r4, r4, r5
 8000484:	10a4      	asrs	r4, r4, #2
 8000486:	2600      	movs	r6, #0
 8000488:	42a6      	cmp	r6, r4
 800048a:	d109      	bne.n	80004a0 <__libc_init_array+0x24>
 800048c:	4d0b      	ldr	r5, [pc, #44]	@ (80004bc <__libc_init_array+0x40>)
 800048e:	4c0c      	ldr	r4, [pc, #48]	@ (80004c0 <__libc_init_array+0x44>)
 8000490:	f000 f818 	bl	80004c4 <_init>
 8000494:	1b64      	subs	r4, r4, r5
 8000496:	10a4      	asrs	r4, r4, #2
 8000498:	2600      	movs	r6, #0
 800049a:	42a6      	cmp	r6, r4
 800049c:	d105      	bne.n	80004aa <__libc_init_array+0x2e>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a4:	4798      	blx	r3
 80004a6:	3601      	adds	r6, #1
 80004a8:	e7ee      	b.n	8000488 <__libc_init_array+0xc>
 80004aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ae:	4798      	blx	r3
 80004b0:	3601      	adds	r6, #1
 80004b2:	e7f2      	b.n	800049a <__libc_init_array+0x1e>
 80004b4:	080004dc 	.word	0x080004dc
 80004b8:	080004dc 	.word	0x080004dc
 80004bc:	080004dc 	.word	0x080004dc
 80004c0:	080004e0 	.word	0x080004e0

080004c4 <_init>:
 80004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c6:	bf00      	nop
 80004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ca:	bc08      	pop	{r3}
 80004cc:	469e      	mov	lr, r3
 80004ce:	4770      	bx	lr

080004d0 <_fini>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr
